000100 TITLE 'DOUGIE''S TEST COBOL PROGRAM'
000110*-------------------------------------------------------
000111*
000112* **                                **
000120* ** THIS PROGRAM DOES NOT WORK YET **
000121* **                                **
000130*
000140* See https://www.youtube.com/watch?v=eeYanhLamjg
000150* For the python code that I used to try to get the
000160* design working.
000161*
000162*  ------------------
000163*
000164*  #!/usr/bin/python3
000165*
000166*  with open("input10.txt", "r") as fp:
000167*      data = [int(line.rstrip()) for line in fp.readlines()]
000168*
000169*  data.append(0)
000170*  data.sort()
000171*  data.append(max(data) + 3)
000172*
000173*  paths = [0] * (max(data) +1)
000174*  paths[0] = 1
000175*
000176*  for index in range(1, max(data) +1):
000177*      #print (index)
000178*      for x in range(1,4):
000179*
000180*          if (index -x) in data:
000181*              paths[index] += paths[index -x]
000182*
000183*  print (str(paths[-1]))
000184*
000185*  ------------------
000204*
000205*-------------------------------------------------------
000210 IDENTIFICATION DIVISION.
000300   PROGRAM-ID. DGL.
000400 ENVIRONMENT DIVISION.
000500 INPUT-OUTPUT SECTION.
000600 FILE-CONTROL.
000700       SELECT INPUT-FILE
000800         ASSIGN TO INFILE
000900         ORGANIZATION IS SEQUENTIAL.
001000 DATA DIVISION.
001100 FILE SECTION.
001200 FD   INPUT-FILE
001300      BLOCK 0 RECORDS
001400*     RECORD 80 CHARACTERS
001500      LABEL RECORDS OMITTED
001600      DATA RECORD IS INPUT-RECORD.
001700 01  INPUT-RECORD.
001800     05 IN-NUMBER.
001900        10 IN-DIGIT-1 PIC 9.
002000        10 IN-DIGIT-2 PIC 9.
002100        10 IN-DIGIT-3 PIC 9.
002200     05 PIC X(77).
002300 WORKING-STORAGE SECTION.
002400 01 INPUT-FILE-EOF      PIC X(5).
002500    88  EOF-MET VALUE 'E-O-F'.
002600 77 REC-COUNT PIC 9(3) COMP.
002700 77 MAX-LOOP PIC 9(3) COMP.
002800 01 NUM-ARRAY.
002900    05 NUM-ENTRY
003000       OCCURS 100 TIMES INDEXED BY INDEX-NUM.
003100       10 NUM-ELEMENT PIC 9(3) COMP-5.
003200 01 PATHS-ARRAY.
003300    05 PATH-ENTRY OCCURS 100 TIMES
003400       PIC 9(15) COMP.
003500 01 TEMP-ENTRY PIC 9(3) COMP-5.
003600 01 SORT-VARIABLES.
003700    05 SORT-1 PIC 9(3) COMP.
003800    05 SORT-2 PIC 9(3) COMP.
003900 77 PATH-IDX PIC 9(3) COMP.
004000 77 PATH-IDX-MINUS-1 PIC S9(3) COMP.
004100 77 PATH-IDX-MINUS-2 PIC S9(3) COMP.
004200 77 PATH-IDX-MINUS-3 PIC S9(3) COMP.
004300 77 REC-IDX PIC 9(3) COMP.
004400 77 REC-IDX-MINUS-1 PIC S9(3) COMP.
004500 77 REC-IDX-MINUS-2 PIC S9(3) COMP.
004600 77 REC-IDX-MINUS-3 PIC S9(3) COMP.
004700 77 FIND-1-IDX PIC 9(3) COMP.
004800 77 FIND-2-IDX PIC 9(3) COMP.
004900 77 FIND-3-IDX PIC 9(3) COMP.
005000 PROCEDURE DIVISION.
005100 PROCEDURE-HEADER-000.
005200     OPEN INPUT INPUT-FILE
005300     MOVE 1 TO REC-COUNT
005400     MOVE 0 TO NUM-ELEMENT(REC-COUNT)
005500     PERFORM WITH TEST BEFORE UNTIL EOF-MET
005600       READ INPUT-FILE
005700       AT END
005800         SET EOF-MET TO TRUE
005900       END-READ
006000       IF NOT EOF-MET THEN
006100         ADD 1 TO REC-COUNT
006200         COMPUTE NUM-ELEMENT(REC-COUNT) = 0 +
006300                 IN-DIGIT-1
006400         IF IN-DIGIT-2 IS NUMERIC THEN
006500           COMPUTE NUM-ELEMENT(REC-COUNT) =
006600                   (NUM-ELEMENT(REC-COUNT) * 10) +
006700                   IN-DIGIT-2
006800         END-IF
006900         IF IN-DIGIT-3 IS NUMERIC THEN
007000           COMPUTE NUM-ELEMENT(REC-COUNT) =
007100                   (NUM-ELEMENT(REC-COUNT) * 10) +
007200                   IN-DIGIT-3
007300         END-IF
007400       END-IF
007500     END-PERFORM
007600     DISPLAY "REC COUNT: ", REC-COUNT
007700     DISPLAY " "
007800*
007900     PERFORM SORT-NUMBERS THRU SORT-NUMBERS-EXIT
008000
008100     DISPLAY "HIGH: ", NUM-ELEMENT(REC-COUNT)
008200     COMPUTE REC-IDX = REC-COUNT + 1
008300     COMPUTE NUM-ELEMENT(REC-IDX) =
008400             NUM-ELEMENT(REC-COUNT) + 3
008500     ADD 1 TO REC-COUNT
008600
008700     MOVE 1 TO PATH-IDX
008800     MOVE 1 TO PATH-ENTRY(PATH-IDX)
008900     COMPUTE MAX-LOOP =
009000             NUM-ELEMENT(REC-COUNT) + 1
009100     DISPLAY "MAX: ", MAX-LOOP
009200     PERFORM
009300      WITH TEST AFTER
009400       VARYING REC-IDX FROM 1 BY 1
009500      UNTIL REC-IDX > MAX-LOOP
009600       COMPUTE REC-IDX-MINUS-1 = REC-IDX - 1
009700       COMPUTE REC-IDX-MINUS-2 = REC-IDX - 2
009800       COMPUTE REC-IDX-MINUS-3 = REC-IDX - 3
009900       COMPUTE PATH-IDX-MINUS-1 = PATH-IDX - 1
010000       COMPUTE PATH-IDX-MINUS-2 = PATH-IDX - 2
010100       COMPUTE PATH-IDX-MINUS-3 = PATH-IDX - 3
010200       DISPLAY "R-IX-1: ", REC-IDX-MINUS-1
010300       IF REC-IDX-MINUS-1 > 0 THEN
010400         PERFORM FIND-1 THRU FIND-1-EXIT
010500       END-IF
010600       DISPLAY "R-IX-2: ", REC-IDX-MINUS-2
010700       IF REC-IDX-MINUS-2 > 0 THEN
010800         PERFORM FIND-2 THRU FIND-2-EXIT
010900       END-IF
011000       DISPLAY "R-IX-3: ", REC-IDX-MINUS-3
011100       IF REC-IDX-MINUS-3 > 0 THEN
011200         PERFORM FIND-3 THRU FIND-3-EXIT
011300       END-IF
011400       DISPLAY "IX: ", PATH-IDX,
011500        " ", PATH-ENTRY(PATH-IDX)
011600       ADD 1 TO PATH-IDX
011700     END-PERFORM
011800     DISPLAY " "
011900     CLOSE INPUT-FILE
012000     STOP RUN.
012100*
012200 SORT-NUMBERS.
012300     PERFORM VARYING SORT-1 FROM 1 BY 1
012400      UNTIL SORT-1 > REC-COUNT
012500     MOVE SORT-1 TO SORT-2
012600       PERFORM VARYING SORT-2 FROM SORT-1 BY 1
012700        UNTIL SORT-2 > REC-COUNT
012800         IF (NUM-ELEMENT(SORT-1) > NUM-ELEMENT(SORT-2))
012900           MOVE NUM-ELEMENT(SORT-1) TO TEMP-ENTRY
013000           MOVE NUM-ELEMENT(SORT-2) TO NUM-ELEMENT(SORT-1)
013100           MOVE TEMP-ENTRY TO NUM-ELEMENT(SORT-2)
013200         END-IF
013300       END-PERFORM
013400     END-PERFORM
013500     .
013600 SORT-NUMBERS-EXIT. EXIT.
013700*
013800 FIND-1.
013900     DISPLAY "FIND 1"
014000     DISPLAY "P-IX: ", PATH-IDX
014100     DISPLAY "P-IX-1: ", PATH-IDX-MINUS-1
014200     DISPLAY "R-IX-1: ", REC-IDX-MINUS-1
014300     PERFORM WITH TEST AFTER
014400      VARYING FIND-1-IDX FROM 1 BY 1
014500      UNTIL FIND-1-IDX > MAX-LOOP
014600       IF NUM-ELEMENT(FIND-1-IDX) = REC-IDX-MINUS-1 THEN
014700         COMPUTE PATH-ENTRY(PATH-IDX) =
014800                 PATH-ENTRY(PATH-IDX) +
014900                 PATH-ENTRY(PATH-IDX-MINUS-1)
015000       END-IF
015100     END-PERFORM
015200     DISPLAY "PE(-1): ", PATH-ENTRY(PATH-IDX-MINUS-1)
015300     DISPLAY "PE: ", PATH-ENTRY(PATH-IDX)
015400     DISPLAY "--------"
015500     .
015600 FIND-1-EXIT. EXIT.
015700*
015800 FIND-2.
015900     DISPLAY "FIND 2"
016000     DISPLAY "P-IX: ", PATH-IDX
016100     DISPLAY "P-IX-2: ", PATH-IDX-MINUS-2
016200     DISPLAY "R-IX-2: ", REC-IDX-MINUS-2
016300     PERFORM WITH TEST AFTER
016400      VARYING FIND-2-IDX FROM 1 BY 1
016500      UNTIL FIND-2-IDX > MAX-LOOP
016600       IF NUM-ELEMENT(FIND-2-IDX) = REC-IDX-MINUS-2 THEN
016700         COMPUTE PATH-ENTRY(PATH-IDX) =
016800                 PATH-ENTRY(PATH-IDX) +
016900                 PATH-ENTRY(PATH-IDX-MINUS-2)
017000       END-IF
017100     END-PERFORM
017200     DISPLAY "PE(-2): ", PATH-ENTRY(PATH-IDX-MINUS-2)
017300     DISPLAY "PE: ", PATH-ENTRY(PATH-IDX)
017400     DISPLAY "--------"
017500     .
017600 FIND-2-EXIT. EXIT.
017700*
017800 FIND-3.
017900     DISPLAY "FIND 2"
018000     DISPLAY "P-IX: ", PATH-IDX
018100     DISPLAY "P-IX-3: ", PATH-IDX-MINUS-3
018200     DISPLAY "P-IX-3: ", REC-IDX-MINUS-3
018300     PERFORM WITH TEST AFTER
018400       VARYING FIND-3-IDX FROM 1 BY 1
018500      UNTIL FIND-3-IDX > MAX-LOOP
018600       IF NUM-ELEMENT(FIND-3-IDX) = REC-IDX-MINUS-3 THEN
018700         COMPUTE PATH-ENTRY(PATH-IDX) =
018800                 PATH-ENTRY(PATH-IDX) +
018900                 PATH-ENTRY(PATH-IDX-MINUS-3)
019000       END-IF
019100     END-PERFORM
019200     DISPLAY "PE(-3): ", PATH-ENTRY(PATH-IDX-MINUS-3)
019300     DISPLAY "PE: ", PATH-ENTRY(PATH-IDX)
019400     DISPLAY "--------"
019500     .
019600 FIND-3-EXIT. EXIT.
