000100 TITLE 'DOUGIE''S TEST COBOL PROGRAM'
000200 IDENTIFICATION DIVISION.
000300   PROGRAM-ID. DGL.
000400 ENVIRONMENT DIVISION.
000500 INPUT-OUTPUT SECTION.
000600 FILE-CONTROL.
000700       SELECT INPUT-FILE
000800         ASSIGN TO INFILE
000900         ORGANIZATION IS SEQUENTIAL.
001000 DATA DIVISION.
001100 FILE SECTION.
001200 FD   INPUT-FILE
001300      BLOCK 0 RECORDS
001400*     RECORD 80 CHARACTERS
001500      LABEL RECORDS OMITTED
001600      DATA RECORD IS INPUT-RECORD.
001700 01  INPUT-RECORD.
001800     05 IN-NUMBER.
001900        10 IN-DIGIT-1 PIC 9.
002000        10 IN-DIGIT-2 PIC 9.
002100        10 IN-DIGIT-3 PIC 9.
002200        10 IN-DIGIT-4 PIC 9.
002300        10 IN-DIGIT-5 PIC 9.
002400        10 IN-DIGIT-6 PIC 9.
002500        10 IN-DIGIT-7 PIC 9.
002600        10 IN-DIGIT-8 PIC 9.
002700        10 IN-DIGIT-9 PIC 9.
002800        10 IN-DIGIT-10 PIC 9.
002900        10 IN-DIGIT-11 PIC 9.
003000        10 IN-DIGIT-12 PIC 9.
003100        10 IN-DIGIT-13 PIC 9.
003200        10 IN-DIGIT-14 PIC 9.
003300        10 IN-DIGIT-15 PIC 9.
003400     05 PIC X(65).
003500 WORKING-STORAGE SECTION.
003600 01  INPUT-FILE-EOF      PIC X(5).
003700     88  EOF-MET VALUE 'E-O-F'.
003800 01  NUM-ARRAY.
003900     05 NUM-ENTRY
004000        OCCURS 1000 TIMES INDEXED BY INDEX-NUM.
004100        10 NUM-ELEMENT PIC 9(15) COMP-5.
004200        10 NUM-OK PIC XXX.
004300 01  WORKING-ARRAY.
004400     05 WORK-ENTRY
004500        OCCURS 1000 TIMES.
004600        10 WORK-ELEMENT
004700           OCCURS 25 TIMES
004800           PIC S9(15) COMP-5.
004900 77  IDX-WORK-ENTRY PIC S9(4) COMP.
005000 77  IDX-WORK-ELEMENT PIC S9(4) COMP.
005100 77  LOOP-COUNT-1 PIC S9(4) COMP.
005200 77  LOOP-COUNT-2 PIC S9(4) COMP.
005300 PROCEDURE DIVISION.
005400 PROCEDURE-HEADER-000.
005500     OPEN INPUT INPUT-FILE
005600     SET INDEX-NUM TO 1
005700     PERFORM WITH TEST BEFORE UNTIL EOF-MET
005800       READ INPUT-FILE
005900       AT END
006000         SET EOF-MET TO TRUE
006100       END-READ
006200       IF NOT EOF-MET THEN
006300         MOVE "NOT" TO NUM-OK(INDEX-NUM)
006400         COMPUTE NUM-ELEMENT(INDEX-NUM) = 0 +
006500                 IN-DIGIT-1
006600         IF IN-DIGIT-2 IS NUMERIC THEN
006700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
006800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
006900                   IN-DIGIT-2
007000         END-IF
007100         IF IN-DIGIT-3 IS NUMERIC THEN
007200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
007300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
007400                   IN-DIGIT-3
007500         END-IF
007600         IF IN-DIGIT-4 IS NUMERIC THEN
007700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
007800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
007900                   IN-DIGIT-4
008000         END-IF
008100         IF IN-DIGIT-5 IS NUMERIC THEN
008200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
008300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
008400                   IN-DIGIT-5
008500         END-IF
008600         IF IN-DIGIT-6 IS NUMERIC THEN
008700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
008800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
008900                   IN-DIGIT-6
009000         END-IF
009100         IF IN-DIGIT-7 IS NUMERIC THEN
009200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
009300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
009400                   IN-DIGIT-7
009500         END-IF
009600         IF IN-DIGIT-8 IS NUMERIC THEN
009700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
009800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
009900                   IN-DIGIT-8
010000         END-IF
010100         IF IN-DIGIT-9 IS NUMERIC THEN
010200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
010300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
010400                   IN-DIGIT-9
010500         END-IF
010600         IF IN-DIGIT-10 IS NUMERIC THEN
010700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
010800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
010900                   IN-DIGIT-10
011000         END-IF
011100         IF IN-DIGIT-11 IS NUMERIC THEN
011200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
011300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
011400                   IN-DIGIT-11
011500         END-IF
011600         IF IN-DIGIT-12 IS NUMERIC THEN
011700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
011800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
011900                   IN-DIGIT-12
012000         END-IF
012100         IF IN-DIGIT-13 IS NUMERIC THEN
012200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
012300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
012400                   IN-DIGIT-13
012500         END-IF
012600         IF IN-DIGIT-14 IS NUMERIC THEN
012700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
012800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
012900                   IN-DIGIT-14
013000         END-IF
013100         IF IN-DIGIT-15 IS NUMERIC THEN
013200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
013300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
013400                   IN-DIGIT-15
013500         END-IF
013600         SET INDEX-NUM UP BY 1
013700       END-IF
013800     END-PERFORM
013900     CLOSE INPUT-FILE
014000*
014100     DISPLAY "COMPUTE"
014200     DISPLAY "-------"
014300     DISPLAY " "
014400     PERFORM VARYING IDX-WORK-ENTRY FROM 26 BY 1
014500      UNTIL IDX-WORK-ENTRY > 1000
014600       PERFORM VARYING LOOP-COUNT-1
014700        FROM 1 BY 1
014800        UNTIL LOOP-COUNT-1 > 25
014900         COMPUTE IDX-WORK-ELEMENT =
015000                 IDX-WORK-ENTRY - 26 + LOOP-COUNT-1
015100         COMPUTE
015200         WORK-ELEMENT(IDX-WORK-ENTRY LOOP-COUNT-1) =
015300         NUM-ELEMENT(IDX-WORK-ENTRY) -
015400         NUM-ELEMENT(IDX-WORK-ELEMENT)
015500*        DISPLAY " IWE: ", IDX-WORK-ENTRY,
015600*                " LOOP: ", LOOP-COUNT-1,
015700*                " IWL: ", IDX-WORK-ELEMENT,
015800*                " WE: ",
015900*        WORK-ELEMENT(IDX-WORK-ENTRY LOOP-COUNT-1),
016000*                " NE(IWE): ",
016100*        NUM-ELEMENT(IDX-WORK-ENTRY),
016200*                " NE(IWL): ",
016300*        NUM-ELEMENT(IDX-WORK-ELEMENT)
016400
016500       END-PERFORM
016600     END-PERFORM
016700*
016800     DISPLAY " "
016900     DISPLAY "COMPARE"
017000     DISPLAY "-------"
017100     DISPLAY " "
017200     PERFORM VARYING IDX-WORK-ENTRY FROM 26 BY 1
017300      UNTIL IDX-WORK-ENTRY > 1000
017400       PERFORM VARYING LOOP-COUNT-1
017500        FROM 1 BY 1
017600        UNTIL LOOP-COUNT-1 > 25
017700         COMPUTE IDX-WORK-ELEMENT =
017800                 IDX-WORK-ENTRY - 26 + LOOP-COUNT-1
017900         PERFORM VARYING LOOP-COUNT-2
018000          FROM 1 BY 1
018100          UNTIL LOOP-COUNT-2 > 25
018200           IF WORK-ELEMENT(IDX-WORK-ENTRY LOOP-COUNT-2) =
018300             NUM-ELEMENT(IDX-WORK-ELEMENT)
018400             MOVE "OK" TO NUM-OK(IDX-WORK-ENTRY)
018500*          DISPLAY " IWE: ", IDX-WORK-ENTRY,
018600*                  " LOOP: ", LOOP-COUNT-1,
018700*                  " IWL: ", IDX-WORK-ELEMENT,
018800*                  " WE: ",
018900*          WORK-ELEMENT(IDX-WORK-ENTRY LOOP-COUNT-1)
019000*                  " NE: ",
019100*          NUM-ELEMENT(IDX-WORK-ELEMENT)
019200*                  " OK: ",
019300*          NUM-OK(IDX-WORK-ENTRY)
019400           END-IF
019500         END-PERFORM
019600       END-PERFORM
019700     END-PERFORM
019800*
019900     DISPLAY " "
020000*
020100     PERFORM VARYING IDX-WORK-ENTRY FROM 26 BY 1
020200      UNTIL IDX-WORK-ENTRY > 1000
020300       IF NUM-OK(IDX-WORK-ENTRY) = "NOT" THEN
020400         DISPLAY IDX-WORK-ENTRY,
020500          " ", NUM-ELEMENT(IDX-WORK-ENTRY)
020600*         " ", NUM-OK(IDX-WORK-ENTRY)
020700       END-IF
020800     END-PERFORM
020900*
021000     STOP RUN.
