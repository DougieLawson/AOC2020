000100 TITLE 'DOUGIE''S TEST COBOL PROGRAM'
000200 IDENTIFICATION DIVISION.
000300   PROGRAM-ID. DGL.
000400 ENVIRONMENT DIVISION.
000500 INPUT-OUTPUT SECTION.
000600 FILE-CONTROL.
000700       SELECT INPUT-FILE
000800         ASSIGN TO INFILE
000900         ORGANIZATION IS SEQUENTIAL.
001000 DATA DIVISION.
001100 FILE SECTION.
001200 FD   INPUT-FILE
001300      BLOCK 0 RECORDS
001400*     RECORD 80 CHARACTERS
001500      LABEL RECORDS OMITTED
001600      DATA RECORD IS INPUT-RECORD.
001700 01  INPUT-RECORD.
001800     05 IN-NUMBER        PIC X(10).
001900     05 PIC X(70).
002000 WORKING-STORAGE SECTION.
002100 01  INPUT-FILE-EOF      PIC X(5).
002200     88  EOF-MET VALUE 'E-O-F'.
002300 77  ROW-NUMBER PIC 9(4) COMP.
002400 77  COLUMN-NUMBER PIC 9(4) COMP.
002500 77  SEAT-NUMBER PIC 9(4) COMP.
002510 77  HIGH-NUMBER PIC 9(4) COMP VALUE 0.
002600 01  NUM-ARRAY.
002700     05 NUM-ARRAY-1
002800     OCCURS 817 TIMES INDEXED BY INDEX-1.
002900     10 FB-1 PIC X.
003000     10 FB-2 PIC X.
003100     10 FB-3 PIC X.
003200     10 FB-4 PIC X.
003300     10 FB-5 PIC X.
003400     10 FB-6 PIC X.
003500     10 FB-7 PIC X.
003600     10 LR-1 PIC X.
003700     10 LR-2 PIC X.
003800     10 LR-3 PIC X.
003900 PROCEDURE DIVISION.
004000 PROCEDURE-HEADER-000.
004100     OPEN INPUT INPUT-FILE
004200     SET INDEX-1 TO 1
004300     PERFORM WITH TEST BEFORE UNTIL EOF-MET
004400       READ INPUT-FILE
004500       AT END
004600         SET EOF-MET TO TRUE
004700       END-READ
004800       IF NOT EOF-MET THEN
004900         MOVE IN-NUMBER TO NUM-ARRAY-1(INDEX-1)
005000         SET INDEX-1 UP BY 1
005100       END-IF
005200     END-PERFORM
005300     CLOSE INPUT-FILE
005400*
005500     PERFORM VARYING INDEX-1 FROM 1 BY 1 UNTIL INDEX-1 = 820
005600       MOVE 0 TO ROW-NUMBER
005700       DISPLAY " -- "
005800       IF FB-1(INDEX-1) = "B" THEN
005900         COMPUTE ROW-NUMBER = ROW-NUMBER + 64
006000       ELSE
006100         CONTINUE
006200       END-IF
006300       IF FB-2(INDEX-1) = "B" THEN
006400         COMPUTE ROW-NUMBER = ROW-NUMBER + 32
006500       ELSE
006600         CONTINUE
006700       END-IF
006900       IF FB-3(INDEX-1) = "B" THEN
007000         COMPUTE ROW-NUMBER = ROW-NUMBER + 16
007100       ELSE
007200         CONTINUE
007300       END-IF
007400       IF FB-4(INDEX-1) = "B" THEN
007500         COMPUTE ROW-NUMBER = ROW-NUMBER + 8
007600       ELSE
007700         CONTINUE
007800       END-IF
008000       IF FB-5(INDEX-1) = "B" THEN
008100         COMPUTE ROW-NUMBER = ROW-NUMBER + 4
008200       ELSE
008300         CONTINUE
008400       END-IF
008500       IF FB-6(INDEX-1) = "B" THEN
008600         COMPUTE ROW-NUMBER = ROW-NUMBER + 2
008700       ELSE
008800         CONTINUE
008900       END-IF
009000       IF FB-7(INDEX-1) = "B" THEN
009100         COMPUTE ROW-NUMBER = ROW-NUMBER + 1
009200       ELSE
009300         CONTINUE
009400       END-IF
009500       MOVE 0 TO COLUMN-NUMBER
009600       IF LR-1(INDEX-1) = "R" THEN
009700         COMPUTE COLUMN-NUMBER = COLUMN-NUMBER + 4
009800       ELSE
009900         CONTINUE
010000       END-IF
010100       IF LR-2(INDEX-1) = "R" THEN
010200         COMPUTE COLUMN-NUMBER = COLUMN-NUMBER + 2
010300       ELSE
010400         CONTINUE
010500       END-IF
010600       IF LR-3(INDEX-1) = "R" THEN
010700         COMPUTE COLUMN-NUMBER = COLUMN-NUMBER + 1
010800       ELSE
010900         CONTINUE
011000       END-IF
011100       COMPUTE SEAT-NUMBER =
011200       (ROW-NUMBER * 8) + COLUMN-NUMBER
011300       DISPLAY " ROW: ", ROW-NUMBER,
011400       " COLUMN: ", COLUMN-NUMBER,
011500       " SEAT: ", SEAT-NUMBER
011510       IF SEAT-NUMBER >= HIGH-NUMBER THEN
011520         MOVE SEAT-NUMBER TO HIGH-NUMBER
011530       END-IF
011600
011700     END-PERFORM
011710     DISPLAY "HIGHEST SEAT: ", HIGH-NUMBER
011800     STOP RUN.
