000100 TITLE 'DOUGIE''S TEST COBOL PROGRAM'
000200 IDENTIFICATION DIVISION.
000300   PROGRAM-ID. DGL.
000400 ENVIRONMENT DIVISION.
000500 INPUT-OUTPUT SECTION.
000600 FILE-CONTROL.
000700       SELECT INPUT-FILE
000800         ASSIGN TO INFILE
000900         ORGANIZATION IS SEQUENTIAL.
001000 DATA DIVISION.
001100 FILE SECTION.
001200 FD   INPUT-FILE
001300      BLOCK 0 RECORDS
001400*     RECORD 80 CHARACTERS
001500      LABEL RECORDS OMITTED
001600      DATA RECORD IS INPUT-RECORD.
001700 01  INPUT-RECORD.
001800     05 IN-BUS PIC X(175).
001900 WORKING-STORAGE SECTION.
002000 01  INPUT-FILE-EOF      PIC X(5).
002100     88  EOF-MET VALUE 'E-O-F'.
002200 01  BUS-RECORDS.
002300     05 BUS-REC
002400        OCCURS 2 TIMES
002500        INDEXED BY IN-BUS-INDEX
002600        PIC X(175).
002700 77  BUS-REC-SPACES PIC 999 COMP.
002800 01  BUS-TIMETABLE.
002900     05 BUS-TIMES OCCURS 20 TIMES.
003000        10 BUS-DEPARTURE-TIME PIC 999 COMP.
003100        10 BUS-DEPARTURE-OFFSET PIC 99 COMP.
003200 77  BUS-REC-START PIC 999 COMP.
003300 77  BUS-REC-PTR PIC 999 COMP.
003400 77  BUS-REC-LEN PIC 999 COMP.
003500 77  BUS-TIME-IDX PIC 99 COMP.
003600 77  BUS-X-COUNT PIC 99 COMP.
003700 77  BUS-DEPARTURES-IDX PIC 99 COMP.
003800 77  BUS-DEP-TIME PIC 9(15) COMP.
003900 77  BUS-DEP-MULTIPLIER PIC 9(15) COMP.
004000 77  BUS-TEMP-VALUE PIC 9(15) COMP.
004100
004200 PROCEDURE DIVISION.
004300 PROCEDURE-HEADER-000.
004400     OPEN INPUT INPUT-FILE
004500     SET IN-BUS-INDEX TO 1
004600     PERFORM WITH TEST BEFORE UNTIL EOF-MET
004700       READ INPUT-FILE
004800       AT END
004900         SET EOF-MET TO TRUE
005000       END-READ
005100       IF NOT EOF-MET THEN
005200         MOVE IN-BUS TO BUS-REC(IN-BUS-INDEX)
005300         SET IN-BUS-INDEX UP BY 1
005400       END-IF
005500     END-PERFORM
005600     CLOSE INPUT-FILE
005700*
005800     MOVE 1 TO BUS-REC-START
005900     MOVE 1 TO BUS-REC-PTR
006000     MOVE 0 TO BUS-REC-LEN
006100     MOVE 1 TO BUS-TIME-IDX
006200     MOVE 0 TO BUS-X-COUNT
006300     PERFORM UNTIL BUS-REC-PTR > 175
006400       IF BUS-REC(2)(BUS-REC-PTR:1) = ","
006500       OR BUS-REC(2)(BUS-REC-PTR:1) = SPACES
006600         ADD 1 TO BUS-X-COUNT
006700         IF BUS-REC(2)(BUS-REC-START:2) NOT = "x,"
006800           COMPUTE BUS-REC-LEN =
006900                   BUS-REC-PTR -
007000                   BUS-REC-START
007100           MOVE BUS-REC(2)(BUS-REC-START:BUS-REC-LEN)
007200                TO BUS-DEPARTURE-TIME(BUS-TIME-IDX)
007300           COMPUTE BUS-DEPARTURE-OFFSET(BUS-TIME-IDX) =
007400                   BUS-X-COUNT - 1
007500           IF BUS-REC(2)(BUS-REC-PTR:1) = SPACES
007600             MOVE 175 TO BUS-REC-PTR
007700           ELSE
007800             ADD 1 TO BUS-TIME-IDX
007900           END-IF
008000         END-IF
008100         MOVE 0 TO BUS-REC-LEN
008200         ADD 1 TO BUS-REC-PTR
008300         MOVE BUS-REC-PTR TO BUS-REC-START
008400       END-IF
008500       ADD 1 TO BUS-REC-PTR
008600     END-PERFORM
008700     DISPLAY "TIME-IDX: ", BUS-TIME-IDX
008800*
008900* BUS-DEPARTURE-TIME(BUS-TIME-IDX)
009000* BUS-DEPARTURE-OFFSET(BUS-TIME-IDX)
009100*
009200     MOVE 0 TO BUS-DEP-TIME
009300     MOVE 0 TO BUS-TEMP-VALUE
009400     MOVE BUS-DEPARTURE-TIME(1) TO BUS-DEP-MULTIPLIER
009500     MOVE 2 TO BUS-DEPARTURES-IDX
009600     DISPLAY "DEP: ", BUS-DEP-TIME, " TEMP: ", BUS-TEMP-VALUE,
009700             " OFF: ", BUS-DEPARTURE-OFFSET(1),
009800             " ID: ", BUS-DEPARTURE-TIME(1)
009900
010000     PERFORM UNTIL BUS-DEPARTURES-IDX > BUS-TIME-IDX
010100       COMPUTE BUS-DEP-TIME =
010200               BUS-DEP-TIME +
010300               BUS-DEP-MULTIPLIER
010400       COMPUTE BUS-TEMP-VALUE =
010500               (BUS-DEP-TIME +
010600                 BUS-DEPARTURE-OFFSET(BUS-DEPARTURES-IDX)) /
010700                 BUS-DEPARTURE-TIME(BUS-DEPARTURES-IDX)
010800       IF BUS-TEMP-VALUE = 0
010900         COMPUTE BUS-DEP-MULTIPLIER =
011000                 BUS-DEP-MULTIPLIER *
011100                 BUS-DEPARTURE-TIME(BUS-DEPARTURES-IDX)
011200         DISPLAY "MULT: ", BUS-DEP-MULTIPLIER
011300         DISPLAY "DEP: ", BUS-DEP-TIME, " TEMP: ", BUS-TEMP-VALUE,
011400                " OFF: ", BUS-DEPARTURE-OFFSET(BUS-DEPARTURES-IDX),
011500                 " ID: ", BUS-DEPARTURE-TIME(BUS-DEPARTURES-IDX)
011600         ADD 1 TO BUS-DEPARTURES-IDX
011700       END-IF
011800     END-PERFORM
011900     DISPLAY BUS-DEP-TIME
012000
012100*
012200*   let time = 0
012300*   let multiplier = buses[0].id
012400*   let unsatisfied = 1
012500*   let next
012600*
012700*   while (unsatisfied < buses.length) {
012800*     time += multiplier
012900*     next = buses[unsatisfied]
013000*
013100*     if ((time + next.req) % next.id === 0) {
013200*       multiplier *= next.id
013300*       unsatisfied++
013400*     }
013500*   }
013600*   return time
013700*   725169163285238
013800*
013900*
014000     STOP RUN.
014100*
