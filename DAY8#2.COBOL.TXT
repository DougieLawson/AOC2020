000100 TITLE 'DOUGIE''S TEST COBOL PROGRAM'
000200 IDENTIFICATION DIVISION.
000300   PROGRAM-ID. DGL.
000400 ENVIRONMENT DIVISION.
000500 INPUT-OUTPUT SECTION.
000600 FILE-CONTROL.
000700       SELECT INPUT-FILE
000800         ASSIGN TO INFILE
000900         ORGANIZATION IS SEQUENTIAL.
001000 DATA DIVISION.
001100 FILE SECTION.
001200 FD   INPUT-FILE
001300      BLOCK 0 RECORDS
001400*     RECORD 80 CHARACTERS
001500      LABEL RECORDS OMITTED
001600      DATA RECORD IS INPUT-RECORD.
001700 01  INPUT-RECORD.
001800     05 IN-OP-CODE       PIC X(3).
001900     05 PIC X.
002000     05 IN-OPERAND.
002100        10 IN-OPERAND-SIGN PIC X.
002200        10 IN-OPERAND-1 PIC 9.
002300        10 IN-OPERAND-2 PIC 9.
002400        10 IN-OPERAND-3 PIC 9.
002500     05 PIC X(72).
002600 WORKING-STORAGE SECTION.
002700 01  INPUT-FILE-EOF      PIC X(5).
002800     88 EOF-MET VALUE 'E-O-F'.
002900 01  PROGRAM-ARRAY.
003000     05 PROGRAM-STATEMENT
003100        OCCURS 620 TIMES INDEXED BY PGM-INDEX.
003200        10 PGM-OP-CODE PIC X(3).
003300        10 PGM-OPERAND PIC S9(4) COMP.
003400        10 PGM-ALREADY-RUN PIC X(3).
003500 77  PGM-COUNTER PIC S9(4) COMP.
003600 77  PGM-ACCUM PIC S9(4) COMP.
003700 77  MODIFY-COUNTER PIC 9(4) COMP.
003800 01  END-LOOP PIC X(3).
003900     88 ALREADY-RUN VALUE 'YES'.
004000 PROCEDURE DIVISION.
004100 PROCEDURE-HEADER-000.
004200     MOVE SPACES TO PROGRAM-ARRAY
004300     OPEN INPUT INPUT-FILE
004400     SET PGM-INDEX TO 1
004500     PERFORM WITH TEST BEFORE UNTIL EOF-MET
004600       READ INPUT-FILE
004700       AT END
004800         SET EOF-MET TO TRUE
004900       END-READ
005000       IF NOT EOF-MET THEN
005100         MOVE IN-OP-CODE TO PGM-OP-CODE(PGM-INDEX)
005200         MOVE "NO " TO PGM-ALREADY-RUN(PGM-INDEX)
005300         EVALUATE TRUE ALSO TRUE ALSO TRUE
005400          WHEN IN-OPERAND-3 IS NUMERIC
005500          ALSO IN-OPERAND-2 IS NUMERIC
005600          ALSO IN-OPERAND-1 IS NUMERIC
005700           IF IN-OPERAND-SIGN = "+"
005800             COMPUTE PGM-OPERAND(PGM-INDEX) = 0 +
005900                     (IN-OPERAND-1 * 100) +
006000                     (IN-OPERAND-2 * 10) +
006100                     IN-OPERAND-3
006200           ELSE
006300             COMPUTE PGM-OPERAND(PGM-INDEX) = 0 -
006400                     (IN-OPERAND-1 * 100) -
006500                     (IN-OPERAND-2 * 10) -
006600                     IN-OPERAND-3
006700           END-IF
006800          WHEN IN-OPERAND-3 = SPACES
006900          ALSO IN-OPERAND-2 IS NUMERIC
007000          ALSO IN-OPERAND-1 IS NUMERIC
007100           IF IN-OPERAND-SIGN = "+"
007200             COMPUTE PGM-OPERAND(PGM-INDEX) = 0 +
007300                     (IN-OPERAND-1 * 10) +
007400                     IN-OPERAND-2
007500           ELSE
007600             COMPUTE PGM-OPERAND(PGM-INDEX) = 0 -
007700                     (IN-OPERAND-1 * 10) -
007800                     IN-OPERAND-2
007900           END-IF
008000          WHEN IN-OPERAND-3 =  SPACES
008100          ALSO IN-OPERAND-2 =  SPACES
008200          ALSO IN-OPERAND-1 IS NUMERIC
008300           IF IN-OPERAND-SIGN = "+"
008400             COMPUTE PGM-OPERAND(PGM-INDEX) = 0 +
008500                     IN-OPERAND-1
008600           ELSE
008700             COMPUTE PGM-OPERAND(PGM-INDEX) = 0 -
008800                     IN-OPERAND-1
008900           END-IF
009000         END-EVALUATE
009100         SET PGM-INDEX UP BY 1
009200       END-IF
009300     END-PERFORM
009400*
009500     MOVE 1 TO MODIFY-COUNTER
009600     PERFORM RUN-PROGRAM THRU RUN-PROGRAM-EXIT
009700     PERFORM
009800      UNTIL MODIFY-COUNTER > 620
009900       EVALUATE PGM-OP-CODE(MODIFY-COUNTER)
010000        WHEN "nop"
010100         MOVE "jmp" TO PGM-OP-CODE(MODIFY-COUNTER)
010200         DISPLAY "NOP -> JMP @", MODIFY-COUNTER
010300         PERFORM RUN-PROGRAM THRU RUN-PROGRAM-EXIT
010400         MOVE "nop" TO PGM-OP-CODE(MODIFY-COUNTER)
010500         ADD 1 TO MODIFY-COUNTER
010600        WHEN 'jmp'
010700         MOVE "nop" TO PGM-OP-CODE(MODIFY-COUNTER)
010800         DISPLAY "JMP -> NOP @", MODIFY-COUNTER
010900         PERFORM RUN-PROGRAM THRU RUN-PROGRAM-EXIT
011000         MOVE "jmp" TO PGM-OP-CODE(MODIFY-COUNTER)
011100         ADD 1 TO MODIFY-COUNTER
011200        WHEN OTHER
011300         ADD 1 TO MODIFY-COUNTER
011400       end-evaluate
011500     END-PERFORM
011600     CLOSE INPUT-FILE
011700     STOP RUN.
011800
011900 RUN-PROGRAM.
012000     DISPLAY "--------"
012010     DISPLAY MODIFY-COUNTER
012100*
012200     MOVE 0 TO PGM-ACCUM
012300     MOVE 1 TO PGM-COUNTER
012400     MOVE SPACES TO END-LOOP
012500     PERFORM VARYING PGM-INDEX FROM 1 BY 1 UNTIL PGM-INDEX > 620
012600       MOVE SPACES TO PGM-ALREADY-RUN(PGM-INDEX)
012700     END-PERFORM
012800*
012900     PERFORM UNTIL ALREADY-RUN
013000*      DISPLAY PGM-COUNTER, " ", PGM-OP-CODE(PGM-COUNTER)
013100*              " ", PGM-OPERAND(PGM-COUNTER),
013200*              " ", PGM-ALREADY-RUN(PGM-COUNTER)
013300       EVALUATE PGM-OP-CODE(PGM-COUNTER)
013400        WHEN "nop"
013500         MOVE "YES" TO PGM-ALREADY-RUN(PGM-COUNTER)
013600         ADD 1 TO PGM-COUNTER
013700        WHEN "acc"
013800*        DISPLAY "acc ", PGM-COUNTER
013900         MOVE "YES" TO PGM-ALREADY-RUN(PGM-COUNTER)
014000         COMPUTE PGM-ACCUM = PGM-ACCUM +
014100         PGM-OPERAND(PGM-COUNTER)
014200         ADD 1 TO PGM-COUNTER
014300        WHEN "jmp"
014400*        DISPLAY "jmp ", PGM-COUNTER
014500         MOVE "YES" TO PGM-ALREADY-RUN(PGM-COUNTER)
014600         COMPUTE PGM-COUNTER = PGM-COUNTER +
014700         PGM-OPERAND(PGM-COUNTER)
014800       END-EVALUATE
014900       IF PGM-ALREADY-RUN(PGM-COUNTER) = "YES" THEN
015000         SET ALREADY-RUN TO TRUE
015100         DISPLAY "ABNORMAL termination"
015200         DISPLAY "PGM-COUNTER: ", PGM-COUNTER
015300         DISPLAY "PGM-ACCUM  : ", PGM-ACCUM
015400       END-IF
015500       IF PGM-OP-CODE(PGM-COUNTER) = SPACES THEN
015600         SET ALREADY-RUN TO TRUE
015700         DISPLAY "NORMAL   termination"
015800         DISPLAY "PGM-COUNTER: ", PGM-COUNTER
015900         DISPLAY "PGM-ACCUM  : ", PGM-ACCUM
016000       END-IF
016100
016200     END-PERFORM
016300     .
016400 RUN-PROGRAM-EXIT. EXIT.
016500*
