000100 TITLE 'DOUGIE''S TEST COBOL PROGRAM'
000200 IDENTIFICATION DIVISION.
000300   PROGRAM-ID. DGL.
000400 ENVIRONMENT DIVISION.
000500 INPUT-OUTPUT SECTION.
000600 FILE-CONTROL.
000700       SELECT INPUT-FILE
000800         ASSIGN TO INFILE
000900         ORGANIZATION IS SEQUENTIAL.
001000 DATA DIVISION.
001100 FILE SECTION.
001200 FD   INPUT-FILE
001300      BLOCK 0 RECORDS
001400*     RECORD 80 CHARACTERS
001500      LABEL RECORDS OMITTED
001600      DATA RECORD IS INPUT-RECORD.
001700 01  INPUT-RECORD.
001800     05 IN-NUMBER.
001900        10 IN-DIGIT-1 PIC 9.
002000        10 IN-DIGIT-2 PIC 9.
002100        10 IN-DIGIT-3 PIC 9.
002200        10 IN-DIGIT-4 PIC 9.
002300        10 IN-DIGIT-5 PIC 9.
002400        10 IN-DIGIT-6 PIC 9.
002500        10 IN-DIGIT-7 PIC 9.
002600        10 IN-DIGIT-8 PIC 9.
002700        10 IN-DIGIT-9 PIC 9.
002800        10 IN-DIGIT-10 PIC 9.
002900        10 IN-DIGIT-11 PIC 9.
003000        10 IN-DIGIT-12 PIC 9.
003100        10 IN-DIGIT-13 PIC 9.
003200        10 IN-DIGIT-14 PIC 9.
003300        10 IN-DIGIT-15 PIC 9.
003400     05 PIC X(65).
003500 WORKING-STORAGE SECTION.
003600 01  INPUT-FILE-EOF      PIC X(5).
003700     88  EOF-MET VALUE 'E-O-F'.
003800 01  NUM-ARRAY.
003900     05 NUM-ENTRY
004000        OCCURS 1000 TIMES INDEXED BY INDEX-NUM.
004100        10 NUM-ELEMENT PIC 9(15) COMP-5.
004200        10 NUM-OK PIC XXX.
004300 01  WORKING-ARRAY.
004400     05 WORK-ENTRY
004500        OCCURS 1000 TIMES.
004600        10 WORK-ELEMENT
004700           OCCURS 25 TIMES
004800           PIC S9(15) COMP-5.
004900        10 WORK-LOWEST PIC S9(4) COMP.
005000        10 WORK-HIGHEST PIC S9(4) COMP.
005100 77  IDX-WORK-ENTRY PIC S9(4) COMP.
005200 77  IDX-WORK-ELEMENT PIC S9(4) COMP.
005300 77  LOOP-COUNT-1 PIC S9(4) COMP.
005400 77  LOOP-COUNT-2 PIC S9(4) COMP.
005500 77  INVALID-ENTRY PIC S9(4) COMP.
005600 PROCEDURE DIVISION.
005700 PROCEDURE-HEADER-000.
005800     OPEN INPUT INPUT-FILE
005900     SET INDEX-NUM TO 1
006200     PERFORM WITH TEST BEFORE UNTIL EOF-MET
006300       READ INPUT-FILE
006400       AT END
006500         SET EOF-MET TO TRUE
006600       END-READ
006700       IF NOT EOF-MET THEN
006800         MOVE "NOT" TO NUM-OK(INDEX-NUM)
006900         COMPUTE NUM-ELEMENT(INDEX-NUM) = 0 +
007000                 IN-DIGIT-1
007100         IF IN-DIGIT-2 IS NUMERIC THEN
007200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
007300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
007400                   IN-DIGIT-2
007500         END-IF
007600         IF IN-DIGIT-3 IS NUMERIC THEN
007700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
007800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
007900                   IN-DIGIT-3
008000         END-IF
008100         IF IN-DIGIT-4 IS NUMERIC THEN
008200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
008300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
008400                   IN-DIGIT-4
008500         END-IF
008600         IF IN-DIGIT-5 IS NUMERIC THEN
008700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
008800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
008900                   IN-DIGIT-5
009000         END-IF
009100         IF IN-DIGIT-6 IS NUMERIC THEN
009200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
009300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
009400                   IN-DIGIT-6
009500         END-IF
009600         IF IN-DIGIT-7 IS NUMERIC THEN
009700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
009800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
009900                   IN-DIGIT-7
010000         END-IF
010100         IF IN-DIGIT-8 IS NUMERIC THEN
010200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
010300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
010400                   IN-DIGIT-8
010500         END-IF
010600         IF IN-DIGIT-9 IS NUMERIC THEN
010700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
010800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
010900                   IN-DIGIT-9
011000         END-IF
011100         IF IN-DIGIT-10 IS NUMERIC THEN
011200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
011300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
011400                   IN-DIGIT-10
011500         END-IF
011600         IF IN-DIGIT-11 IS NUMERIC THEN
011700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
011800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
011900                   IN-DIGIT-11
012000         END-IF
012100         IF IN-DIGIT-12 IS NUMERIC THEN
012200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
012300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
012400                   IN-DIGIT-12
012500         END-IF
012600         IF IN-DIGIT-13 IS NUMERIC THEN
012700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
012800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
012900                   IN-DIGIT-13
013000         END-IF
013100         IF IN-DIGIT-14 IS NUMERIC THEN
013200           COMPUTE NUM-ELEMENT(INDEX-NUM) =
013300                   (NUM-ELEMENT(INDEX-NUM) * 10) +
013400                   IN-DIGIT-14
013500         END-IF
013600         IF IN-DIGIT-15 IS NUMERIC THEN
013700           COMPUTE NUM-ELEMENT(INDEX-NUM) =
013800                   (NUM-ELEMENT(INDEX-NUM) * 10) +
013900                   IN-DIGIT-15
014000         END-IF
014100         SET INDEX-NUM UP BY 1
014200       END-IF
014300     END-PERFORM
014400     CLOSE INPUT-FILE
014500*
014800     PERFORM VARYING IDX-WORK-ENTRY FROM 26 BY 1
014900      UNTIL IDX-WORK-ENTRY > 1000
015000       PERFORM VARYING LOOP-COUNT-1
015100        FROM 1 BY 1
015200        UNTIL LOOP-COUNT-1 > 25
015300         COMPUTE IDX-WORK-ELEMENT =
015400                 IDX-WORK-ENTRY - 26 + LOOP-COUNT-1
015500         COMPUTE
015600         WORK-ELEMENT(IDX-WORK-ENTRY LOOP-COUNT-1) =
015700         NUM-ELEMENT(IDX-WORK-ENTRY) -
015800         NUM-ELEMENT(IDX-WORK-ELEMENT)
015900       END-PERFORM
016000     END-PERFORM
016100*
016400     PERFORM VARYING IDX-WORK-ENTRY FROM 26 BY 1
016500      UNTIL IDX-WORK-ENTRY > 1000
016600       PERFORM VARYING LOOP-COUNT-1
016700        FROM 1 BY 1
016800        UNTIL LOOP-COUNT-1 > 25
016900         COMPUTE IDX-WORK-ELEMENT =
017000                 IDX-WORK-ENTRY - 26 + LOOP-COUNT-1
017100         PERFORM VARYING LOOP-COUNT-2
017200          FROM 1 BY 1
017300          UNTIL LOOP-COUNT-2 > 25
017400           IF WORK-ELEMENT(IDX-WORK-ENTRY LOOP-COUNT-2) =
017500             NUM-ELEMENT(IDX-WORK-ELEMENT)
017600             MOVE "OK" TO NUM-OK(IDX-WORK-ENTRY)
017700           END-IF
017800         END-PERFORM
017900       END-PERFORM
018000     END-PERFORM
018100*
018400*
018500     PERFORM VARYING IDX-WORK-ENTRY FROM 26 BY 1
018600      UNTIL IDX-WORK-ENTRY > 1000
018700       IF NUM-OK(IDX-WORK-ENTRY) = "NOT" THEN
018800          MOVE IDX-WORK-ENTRY TO INVALID-ENTRY
018900          MOVE 1001 TO IDX-WORK-ENTRY
019000       END-IF
019100     END-PERFORM
019200     DISPLAY INVALID-ENTRY,
019300          " ", NUM-ELEMENT(INVALID-ENTRY)
019400*         " ", NUM-OK(INVALID-ENTRY)
019500     DISPLAY " "
019600*
019900*
020000     MOVE ZEROS TO WORKING-ARRAY
020100     COMPUTE LOOP-COUNT-1 = INVALID-ENTRY - 1
020200     PERFORM UNTIL LOOP-COUNT-1 < 1
020400       COMPUTE LOOP-COUNT-2 = LOOP-COUNT-1 - 1
020500       MOVE LOOP-COUNT-1 TO
020600        WORK-HIGHEST(LOOP-COUNT-1)
020900       MOVE NUM-ELEMENT(INVALID-ENTRY)
021000        TO WORK-ELEMENT(LOOP-COUNT-1 1)
021001
021010       MOVE 0 TO
021020        WORK-ELEMENT(LOOP-COUNT-1 2)
021030
021100       MOVE NUM-ELEMENT(INVALID-ENTRY) TO
021200        WORK-ELEMENT(LOOP-COUNT-1 3)
021210
021300       PERFORM UNTIL LOOP-COUNT-2 < 1
021500         IF NUM-ELEMENT(LOOP-COUNT-2) >
021600          WORK-ELEMENT(LOOP-COUNT-1 2) THEN
021700           MOVE NUM-ELEMENT(LOOP-COUNT-2) TO
021800           WORK-ELEMENT(LOOP-COUNT-1 2)
021900           MOVE LOOP-COUNT-2 TO
022000           WORK-HIGHEST(LOOP-COUNT-1)
022100         END-IF
022200         IF NUM-ELEMENT(LOOP-COUNT-2) <
022300          WORK-ELEMENT(LOOP-COUNT-1 3)
022400           MOVE NUM-ELEMENT(LOOP-COUNT-2) TO
022500           WORK-ELEMENT(LOOP-COUNT-1 3)
022600           MOVE LOOP-COUNT-2 TO
022700           WORK-LOWEST(LOOP-COUNT-1)
022800         END-IF
022900         COMPUTE WORK-ELEMENT(LOOP-COUNT-1 1) =
023000          WORK-ELEMENT(LOOP-COUNT-1 1) -
023100          NUM-ELEMENT(LOOP-COUNT-2)
023200         MOVE LOOP-COUNT-2 TO
023300          WORK-LOWEST(LOOP-COUNT-1)
023400*        DISPLAY
023500*          "LC1: ", LOOP-COUNT-1,
023600*          " LC2: ", LOOP-COUNT-2,
023800*          " NE(2): ", NUM-ELEMENT(LOOP-COUNT-2)
023900*          " WE(2): ", WORK-ELEMENT(LOOP-COUNT-1 2),
024000*          " WE(3): ", WORK-ELEMENT(LOOP-COUNT-1 3),
024100         IF WORK-ELEMENT(LOOP-COUNT-1 1) <= 0 THEN
024200           MOVE -2000 TO LOOP-COUNT-2
024400         END-IF
024500         SUBTRACT 1 FROM LOOP-COUNT-2
024600       END-PERFORM
024900       IF WORK-ELEMENT(LOOP-COUNT-1 1) = 0 THEN
025000         DISPLAY
025100           "LOW: ",
025200           WORK-LOWEST(LOOP-COUNT-1)
025300           " ",
025400           " HIGH: ",
025500           WORK-HIGHEST(LOOP-COUNT-1)
025600           " ",
025700*
025800         COMPUTE WORK-ELEMENT(INVALID-ENTRY 1) =
025900           WORK-ELEMENT(LOOP-COUNT-1 2) +
026000           WORK-ELEMENT(LOOP-COUNT-1 3)
026100*
026200         DISPLAY
026300           "LOW ELEM: ", WORK-ELEMENT(LOOP-COUNT-1 2)
026400           " HIGH ELEM: ", WORK-ELEMENT(LOOP-COUNT-1 3)
026500           " SUM: ", WORK-ELEMENT(INVALID-ENTRY 1)
026600           " ",
026700         MOVE -2000 TO LOOP-COUNT-1
026900       END-IF
027000       SUBTRACT 1 FROM LOOP-COUNT-1
027100     END-PERFORM
027400*
027500     STOP RUN.
