000100*
000200* **                                **
000300* ** THIS PROGRAM DOES NOT WORK YET **
000400* **                                **
000500*
000600 TITLE 'DOUGIE''S TEST COBOL PROGRAM'
000700 IDENTIFICATION DIVISION.
000800   PROGRAM-ID. DGL.
000900 ENVIRONMENT DIVISION.
001000 INPUT-OUTPUT SECTION.
001100 FILE-CONTROL.
001200       SELECT INPUT-FILE
001300         ASSIGN TO INFILE
001400         ORGANIZATION IS SEQUENTIAL.
001500 DATA DIVISION.
001600 FILE SECTION.
001700 FD   INPUT-FILE
001800      BLOCK 0 RECORDS
001900*     RECORD 80 CHARACTERS
002000      LABEL RECORDS OMITTED
002100      DATA RECORD IS INPUT-RECORD.
002200 01  INPUT-RECORD.
002300     05 IN-PGM PIC X(80).
002400 WORKING-STORAGE SECTION.
002500 01  INPUT-FILE-EOF      PIC X(5).
002600     88  EOF-MET VALUE 'E-O-F'.
002700 01  PGM-RECORDS.
002800     05 PGM-REC
002900        OCCURS 100 TIMES.
003000        10 PGM-MASK PIC X(80).
003100        10 PGM-INSTRUCTIONS.
003200           15 PGM-INSTR
003300              OCCURS 7 TIMES
003400              PIC X(80).
003500 77  PGM-REC-IDX PIC 999 COMP.
003600 77  PGM-INSTR-IDX PIC 999 COMP.
003700 01  WS-PGM-LINE.
003800     05 WS-PGM-REC
003900        OCCURS 100 TIMES.
004000        10 WS-PGM-MASK PIC X(36).
004100        10 WS-PGM-MASK-SET PIC 9(14) COMP.
004200        10 WS-PGM-MASK-CLR PIC 9(14) COMP.
004300        10 WS-PGM-INSTR-COUNT PIC 999 COMP.
004400        10 WS-PGM-INSTR
004500           OCCURS 7 TIMES.
004600           15 WS-PGM-MEM-IDX PIC 999 COMP.
004700           15 WS-PGM-INSTR-ADDR PIC 9(5).
004800           15 WS-PGM-INSTR-CONTENT PIC 9(10).
004900 01  WS-MEMORY.
005000     05 WS-MEM-FOUND PIC 999 COMP.
005100     05 WS-MEM-HIGH-IDX PIC 999 COMP.
005200     05 WS-MEM-CUR-IDX PIC 999 COMP.
005300     05 WS-MEM-LOCATION
005400        OCCURS 475 TIMES.
005500        10 WS-MEM-IDX PIC 999 COMP.
005600        10 WS-MEM-ADDR PIC 9(5).
005700        10 WS-MEM-CONTENT PIC 9(14).
005800 77  UNSTRING-JUNK-1 PIC X(4).
005900 77  UNSTRING-JUNK-2 PIC X(4).
006000 77  UNSTRING-TEMP-ADDR PIC X(7).
006100 77  UNSTRING-TEMP-CONTENT PIC X(17).
006200 77  WS-TWO-POWER-36-1 PIC 9(11)
006300     VALUE 68719476736 COMP.
006400 77  WS-TWO-POWER PIC 9(11) COMP.
006500 77  WS-MASK-IDX PIC 99.
006600 77  WS-TOTAL PIC 9(14) COMP.
006700
006800 PROCEDURE DIVISION.
006900     OPEN INPUT INPUT-FILE
007000     MOVE 0 TO PGM-REC-IDX
007100     PERFORM WITH TEST BEFORE UNTIL EOF-MET
007200       READ INPUT-FILE
007300       AT END
007400         SET EOF-MET TO TRUE
007500       END-READ
007600       IF NOT EOF-MET THEN
007700         IF IN-PGM(1:4) = "mask"
007800           ADD 1 TO PGM-REC-IDX
007900           MOVE IN-PGM TO PGM-MASK(PGM-REC-IDX)
008000           MOVE 1 TO PGM-INSTR-IDX
008100           MOVE SPACES TO PGM-INSTRUCTIONS(PGM-REC-IDX)
008200         ELSE
008300           IF IN-PGM(1:3) = "mem"
008400             MOVE IN-PGM TO PGM-INSTR(PGM-REC-IDX PGM-INSTR-IDX)
008500             ADD 1 TO PGM-INSTR-IDX
008600           END-IF
008700         END-IF
008800       END-IF
008900     END-PERFORM
009000     CLOSE INPUT-FILE
009100
009200     MOVE 0 TO WS-MEMORY
009300     MOVE 0 TO WS-MEM-HIGH-IDX
009400     MOVE 1 TO WS-MEM-CUR-IDX
009500
009600     PERFORM VARYING PGM-REC-IDX
009700      FROM 1 BY 1
009800      UNTIL PGM-REC-IDX > 100
009900       MOVE PGM-MASK(PGM-REC-IDX)(8:36)
010000        TO WS-PGM-MASK(PGM-REC-IDX)
010100       PERFORM DECODE-MASK
010200*      DISPLAY "MASK: ", WS-PGM-MASK(PGM-REC-IDX),
010300*              " SET: ", WS-PGM-MASK-SET(PGM-REC-IDX)
010400*              " CLR: ", WS-PGM-MASK-CLR(PGM-REC-IDX)
010500       PERFORM VARYING PGM-INSTR-IDX
010600        FROM 1 BY 1
010700        UNTIL PGM-INSTR-IDX > 7
010800*        DISPLAY "REC", PGM-REC-IDX, " INSTR:", PGM-INSTR-IDX
010900         IF PGM-INSTR(PGM-REC-IDX PGM-INSTR-IDX) NOT = SPACES
011000           UNSTRING PGM-INSTR(PGM-REC-IDX PGM-INSTR-IDX)
011100           DELIMITED BY ALL "[" OR ALL "=" OR ALL "]"
011200           INTO UNSTRING-JUNK-1
011300                UNSTRING-TEMP-ADDR
011400                UNSTRING-JUNK-2
011500                UNSTRING-TEMP-CONTENT
011600           END-UNSTRING
011700           COMPUTE
011800                WS-PGM-INSTR-ADDR(PGM-REC-IDX PGM-INSTR-IDX)
011900                = FUNCTION NUMVAL(UNSTRING-TEMP-ADDR)
012000
012100           COMPUTE
012200                WS-PGM-INSTR-CONTENT(PGM-REC-IDX PGM-INSTR-IDX)
012300                = FUNCTION NUMVAL(UNSTRING-TEMP-CONTENT)
012400
012500           PERFORM MAP-ADDR-MEM
012600           ADD 1 TO WS-PGM-INSTR-COUNT(PGM-REC-IDX)
012700         END-IF
012800*        DISPLAY "  COUNT: ", WS-PGM-INSTR-COUNT(PGM-REC-IDX)
012900       END-PERFORM
013000     END-PERFORM
013100*
013200     PERFORM VARYING PGM-REC-IDX FROM 1 BY 1
013300      UNTIL PGM-REC-IDX > 100
013400       PERFORM VARYING PGM-INSTR-IDX FROM 1 BY 1
013500        UNTIL PGM-INSTR-IDX > WS-PGM-INSTR-COUNT(PGM-REC-IDX)
013600         MOVE WS-PGM-MEM-IDX(PGM-REC-IDX PGM-INSTR-IDX)
013700          TO WS-MEM-CUR-IDX
013800         COMPUTE WS-MEM-CONTENT(WS-MEM-CUR-IDX) =
013900                 WS-MEM-CONTENT(WS-MEM-CUR-IDX) +
014000                 WS-PGM-INSTR-CONTENT(PGM-REC-IDX PGM-INSTR-IDX)
014100         COMPUTE WS-MEM-CONTENT(WS-MEM-CUR-IDX) =
014200                 WS-MEM-CONTENT(WS-MEM-CUR-IDX) +
014300                 WS-PGM-MASK-SET(PGM-REC-IDX)
014400         COMPUTE WS-MEM-CONTENT(WS-MEM-CUR-IDX) =
014500                 WS-MEM-CONTENT(WS-MEM-CUR-IDX) -
014600                 WS-PGM-MASK-CLR(PGM-REC-IDX)
014700         DISPLAY "MEM: ", WS-MEM-CUR-IDX,
014800                 " ", WS-MEM-CONTENT(WS-MEM-CUR-IDX)
014900
015000       END-PERFORM
015100     END-PERFORM
015200*
015300*                 17934269678453
015400*
015500     PERFORM VARYING WS-MEM-CUR-IDX FROM 1 BY 1
015600      UNTIL WS-MEM-CUR-IDX > WS-MEM-HIGH-IDX
015700      COMPUTE WS-TOTAL =
015800              WS-TOTAL +
015900              WS-MEM-CONTENT(WS-MEM-CUR-IDX)
016000     END-PERFORM
016100     DISPLAY "TOTAL: ", WS-TOTAL
016200*
016300     STOP RUN.
016400*
016500* Decode
016600*    WS-PGM-MASK(PGM-REC-IDX)
016700* into
016800*    WS-PGM-MASK-SET(PGM-REC-IDX) - when bit is 1
016900*    WS-PGM-MASK-CLR(PGM-REC-IDX) - when bit is 0
017000*
017100 DECODE-MASK.
017200     MOVE WS-TWO-POWER-36-1 TO WS-TWO-POWER
017300     PERFORM VARYING WS-MASK-IDX FROM 1 BY 1
017400      UNTIL WS-MASK-IDX > 36
017500      COMPUTE WS-TWO-POWER = WS-TWO-POWER / 2
017600      IF WS-PGM-MASK(PGM-REC-IDX)(WS-MASK-IDX:1) = "X"
017700        CONTINUE
017800      ELSE IF WS-PGM-MASK(PGM-REC-IDX)(WS-MASK-IDX:1) = "1"
017900          COMPUTE WS-PGM-MASK-SET(PGM-REC-IDX) =
018000                  WS-PGM-MASK-SET(PGM-REC-IDX) +
018100                  WS-TWO-POWER
018200        ELSE IF WS-PGM-MASK(PGM-REC-IDX)(WS-MASK-IDX:1) = "0"
018300            COMPUTE WS-PGM-MASK-CLR(PGM-REC-IDX) =
018400                    WS-PGM-MASK-CLR(PGM-REC-IDX) +
018500                    WS-TWO-POWER
018600          END-IF
018700        END-IF
018800      END-IF
018900      DISPLAY " IN LOOP:", PGM-REC-IDX,
019000      " I:", WS-MASK-IDX,
019100      " S:", WS-PGM-MASK-SET(PGM-REC-IDX),
019200      " C:", WS-PGM-MASK-CLR(PGM-REC-IDX)
019300
019400     END-PERFORM
019500     EXIT.
019600*
019700 MAP-ADDR-MEM.
019800*
019900* Link
020000*      WS-PGM-MEM-IDX(PGM-REC-IDX PGM-INSTR-IDX)
020100* to
020200*      WS-MEM-IDX(WS-MEM-CUR-IDX)
020300* bi-directionally
020400*
020500     MOVE 1 TO WS-MEM-CUR-IDX
020600     MOVE 0 TO WS-MEM-FOUND
020700     PERFORM
020800      UNTIL WS-MEM-CUR-IDX > WS-MEM-HIGH-IDX
020900       IF
021000         WS-PGM-INSTR-ADDR(PGM-REC-IDX PGM-INSTR-IDX) =
021100         WS-MEM-ADDR(WS-MEM-CUR-IDX)
021200         MOVE WS-MEM-CUR-IDX TO WS-MEM-FOUND
021300         MOVE WS-MEM-CUR-IDX TO
021400              WS-PGM-MEM-IDX(PGM-REC-IDX PGM-INSTR-IDX)
021500*        DISPLAY "OLD entry: ", PGM-REC-IDX
021600*        DISPLAY " IDX: ", WS-MEM-CUR-IDX
021700*        DISPLAY "  PGM-ADDR: ",
021800*              WS-PGM-INSTR-ADDR(PGM-REC-IDX PGM-INSTR-IDX)
021900*              " PGM-IDX: ",
022000*              WS-PGM-MEM-IDX(PGM-REC-IDX PGM-INSTR-IDX)
022100*        DISPLAY "  MEM-ADDR: ", WS-MEM-ADDR(WS-MEM-CUR-IDX)
022200*              " MEM-IDX: ", WS-MEM-IDX(WS-MEM-CUR-IDX)
022300*              " CONTENT: ",
022400*              WS-PGM-INSTR-CONTENT(PGM-REC-IDX PGM-INSTR-IDX)
022500       END-IF
022600       ADD 1 TO WS-MEM-CUR-IDX
022700     END-PERFORM
022800     IF WS-MEM-FOUND = 0
022900       ADD 1 TO WS-MEM-HIGH-IDX
023000       MOVE WS-MEM-HIGH-IDX TO
023100            WS-PGM-MEM-IDX(PGM-REC-IDX PGM-INSTR-IDX)
023200       MOVE WS-MEM-HIGH-IDX TO
023300            WS-MEM-IDX(WS-MEM-HIGH-IDX)
023400       MOVE WS-PGM-INSTR-ADDR(PGM-REC-IDX PGM-INSTR-IDX) TO
023500            WS-MEM-ADDR(WS-MEM-HIGH-IDX)
023600*      DISPLAY "NEW entry: ", PGM-REC-IDX
023700*      DISPLAY "  PGM-ADDR: ",
023800*            WS-PGM-INSTR-ADDR(PGM-REC-IDX PGM-INSTR-IDX)
023900*            " PGM-IDX: ",
024000*            WS-PGM-MEM-IDX(PGM-REC-IDX PGM-INSTR-IDX)
024100*      DISPLAY "  MEM-ADDR: ", WS-MEM-ADDR(WS-MEM-CUR-IDX)
024200*            " MEM-IDX: ", WS-MEM-IDX(WS-MEM-CUR-IDX)
024300*            " CONTENT: ",
024400*            WS-PGM-INSTR-CONTENT(PGM-REC-IDX PGM-INSTR-IDX)
024500     END-IF
024600     EXIT.
